version: '3.8'

services:
  neo4j:
    image: neo4j:5.14
    container_name: geo-neo4j
    ports:
      - "7476:7474"  # HTTP (changed from 7474 to avoid conflict)
      - "7689:7687"  # Bolt (changed from 7687 to avoid conflict)
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-geo_password_2025}
      - NEO4J_dbms_memory_pagecache_size=2G
      - NEO4J_dbms_memory_heap_initial__size=2G
      - NEO4J_dbms_memory_heap_max__size=4G
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      - NEO4JLABS_PLUGINS=["apoc", "graph-data-science"]
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/import
      - neo4j-plugins:/plugins
      - ./neo4j-schema.cypher:/import/schema.cypher:ro
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-geo_password_2025}", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - geo-network

  geo-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.10
    container_name: geo-api
    ports:
      - "8001:8000"  # Changed from 8000 to avoid conflict
    environment:
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-geo_password_2025}
      - INFRANODUS_API_KEY=${INFRANODUS_API_KEY:-}
      - INFRANODUS_API_URL=${INFRANODUS_API_URL:-https://infranodus.com/api}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./data_output:/app/data_output
      - ./reports:/app/reports
      - ./demo_output:/app/demo_output
    depends_on:
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - geo-network

  redis:
    image: redis:7-alpine
    container_name: geo-redis
    ports:
      - "6380:6379"  # Changed from 6379 to avoid conflict
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - geo-network

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: geo-celery-worker
    command: celery -A tasks worker --loglevel=info --concurrency=4
    environment:
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-geo_password_2025}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - INFRANODUS_API_KEY=${INFRANODUS_API_KEY:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./data_output:/app/data_output
      - ./reports:/app/reports
    depends_on:
      - neo4j
      - redis
    restart: unless-stopped
    networks:
      - geo-network

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: geo-celery-beat
    command: celery -A tasks beat --loglevel=info
    environment:
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-geo_password_2025}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - neo4j
      - redis
    restart: unless-stopped
    networks:
      - geo-network

  nginx:
    image: nginx:alpine
    container_name: geo-nginx
    ports:
      - "8080:80"   # Changed from 80 to avoid conflict
      - "8443:443"  # Changed from 443 to avoid conflict
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - geo-api
    restart: unless-stopped
    networks:
      - geo-network

volumes:
  neo4j-data:
    driver: local
  neo4j-logs:
    driver: local
  neo4j-import:
    driver: local
  neo4j-plugins:
    driver: local
  redis-data:
    driver: local

networks:
  geo-network:
    driver: bridge
