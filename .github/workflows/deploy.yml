name: CD - Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.geo-system.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: SSH to server and pull latest image
        # ssh user@staging-server "cd /app && docker-compose pull && docker-compose up -d"

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here
        # Example: curl checks, basic API tests

    - name: Notify deployment
      if: always()
      run: |
        echo "Staging deployment completed"
        # Add notification logic (Slack, email, etc.)

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://geo-system.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment backup
      run: |
        echo "Creating backup before deployment..."
        # Add backup commands here

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: SSH to server and pull latest image
        # ssh user@prod-server "cd /app && docker-compose pull && docker-compose up -d"

    - name: Run health checks
      run: |
        echo "Running health checks on production..."
        # Add health check commands here
        # Example: curl checks, API validation

    - name: Notify deployment
      if: always()
      run: |
        echo "Production deployment completed"
        # Add notification logic (Slack, email, etc.)

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-staging, deploy-production]
    environment:
      name: rollback

    steps:
    - name: Rollback deployment
      run: |
        echo "Rolling back deployment..."
        # Add rollback commands here
        # Example: SSH to server and revert to previous version

    - name: Notify rollback
      run: |
        echo "Deployment rolled back"
        # Add notification logic

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: deploy-production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this release

          See [CHANGELOG.md](./CHANGELOG.md) for details.

          ## Docker Image

          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```

          ## Installation

          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd infranodus-geo-system
          git checkout ${{ github.ref_name }}
          docker-compose up -d
          ```
        draft: false
        prerelease: false
